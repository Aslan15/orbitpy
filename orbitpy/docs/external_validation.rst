External Validation
*******************

About
=====

Core features of OrbitPy were validated against GMAT and STK, two industry standard mission design softwares. Although these tests are generated and run using Python's unittest module, it is important that they are not thought of as traditional unit tests. Since they test whole features of OrbitPy at once, any errors found in these tests would be difficult to tie to a particular algorithm or software feature. Furthermore, since STK in particular is a closed-source proprietary software, implementation details that differ from OrbitPy are difficult to quantify and predict.

The purpose of these tests is to provide a high-level 'sanity check' for OrbitPy, as well as a constant base of reference for future software revisions.

All of the files associated with these test can be found at :code:`tests/validation`. :code:`tests/validation/STK` contains the files used to generate STK truth data, while :code:`tests/validation/GMAT` contains the files used to generate GMAT truth data. After the test cases are run, the OrbitPy results can be found at :code:`tests/validation/temp`.


GMAT Tests
==========

GMAT Propagation Tests: Model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The propagation model was tested against GMAT's orbit propagation capabilities. GMAT's propagation settings were fine-tuned to match
OrbitPy's capabilities as closely as possible. This included using the eq2000 frame for propagation and output, limiting the gravity model
to only consideration of degree 2, order 0 perturbations (J2 only), changing the earth radius value to exactly match OrbitPy's, and
setting the min/max step size on the numerical propagator to 1 second, among other settings.

Due to certain unresolvable differences between GMAT and OrbitPy, it is impossible to match the outputs exactly. In particular, GMAT uses a numerical propagator, while OrbitPy uses an analytical model. OrbitPy's analytical model considers only secular
J2 perturbations, while GMAT considers all J2 (periodic and secular) perturbations. This is likely the biggest cause of difference between
the two outputs.

GMAT Propagation Tests: Analysis
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The initial position for each test came out to match exactly. However, the example plots below clearly illustrate the modelling differences between GMAT and OrbitPy. The results for the first test case (a 7000 km equatorial circular orbit, with all other orbital elements set to 0) 
expressed in cartesian coordinates show divergence.

.. figure:: ./plots/GMAT_01_X_Diff.png
	:scale: 75%
	:align: center

Notably, the Z position also diverges. An inclination is introduced in the GMAT propagation that remains at zero in the OrbitPy propagation. This is due to a periodic perturbation in inclination modeled in GMAT, but taken as zero in OrbitPy.

.. figure:: ./plots/GMAT_01_Z_Diff.png
	:scale: 75%
	:align: center

These additional periodic perturbations in the GMAT model can be more clearly seen when examining the keplerian elements. In particular, the semi-major axis, eccentricity, and inclination are subject to periodic purturbations not present in OrbitPy (for this OrbitPy test case, these values remained at zero throughout the simulation).

.. figure:: ./plots/GMAT_01_SMA.png
	:scale: 75%
	:align: center

.. figure:: ./plots/GMAT_01_ECC.png
	:scale: 75%
	:align: center

.. figure:: ./plots/GMAT_01_INC.png
	:scale: 75%
	:align: center
	
STK Tests
=========

STK Propagation Tests: Model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Due to the significant modelling differences between OrbitPy and GMAT, STK was used for the remaining test cases. STK was expected to match much more closely with GMAT, because STK has the option of using an analytical propagator which considers only secular perturbations in J2, just like OrbitPy. As with GMAT, the STK settings were matched as closely as possible with OrbitPy. The STK scenario file used to produce the data can be found at :code:`tests/validation/STK/test_STK_propagation/Test_01.sc`.

The STK test cases resulted in a much smaller difference than GMAT. Remaining differences are likely explained by a variety of small factors, such as floating point error and slight modelling differences. 

Test case were set to pass if the difference in each cartesian state was less than 6 km at every point along the orbit. The last three tests compared RAAN drift: these were set to pass if the difference in RAAN was less than .015 degrees at every point along the orbit.

STK Propagation Tests: Inputs
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The test case were generated by propagating the following orbits for one day:

1.  * SMA: 7000
    * ECC: 0
    * INC: 0
    * RAAN: 0
    * AOP: 0
    * TA: 0
2.  * SMA: 7000
    * ECC: 0
    * INC: 1
    * RAAN: 1
    * AOP: 1
    * TA: 1
3.  * SMA: 7000
    * ECC: 0
    * INC: 90
    * RAAN: 180
    * AOP: 180
    * TA: 180
4.  * SMA: 7578.378
    * ECC: 0
    * INC: 45.7865
    * RAAN: 98.8797
    * AOP: 75.78089
    * TA: 277.789
5.  * SMA: 7578.378
    * ECC: 0
    * INC: 180
    * RAAN: 98.8797
    * AOP: 75.78089
    * TA: 277.789
6.  * SMA: 7000
    * ECC: 0
    * INC: 90
    * RAAN: 98.8797
    * AOP: 75.78089
    * TA: 277.789
7.  * SMA: 7000
    * ECC: 0
    * INC: 10
    * RAAN: 98.8797
    * AOP: 75.78089
    * TA: 277.789
8.  * SMA: 7000
    * ECC: 0
    * INC: 170
    * RAAN: 98.8797
    * AOP: 75.78089
    * TA: 277.789


STK Propagation Tests: Analysis
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The results from all eight test cases are summarized in the table below:

.. list-table:: **Test Results**
   :header-rows: 1
   :stub-columns: 1
   
   * - 
     - 1
     - 2
     - 3
     - 4
     - 5
     - 6
     - 7
     - 8
   * - Max Difference (km)
     - 4.69
     - 4.68
     - 3.82
     - 3.33
     - 4.19
     - N/A
     - N/A
     - N/A
   * - Max Difference (deg)
     - N/A
     - N/A
     - N/A
     - N/A
     - N/A
     - .00000149
     - .00914
     - .00916
   
The results from the first test case, this time with STK data, are shown again below.

.. figure:: ./plots/STK_01_X_Diff.png
	:scale: 75%
	:align: center

A difference in the Z positions is still introduced, although it is substantially smaller. For an unknown reason, the STK propagation also introduces a small inclination, although much less than GMAT.

.. figure:: ./plots/STK_01_Z_Diff.png
	:scale: 75%
	:align: center

The difference in the semi-major axis, eccentricity, and inclination are plotted below. The semi-major axis and inclination difference plots both exibit very small, random error, while the inclination plot shows a slightly larger, linearly increasing difference.

.. figure:: ./plots/STK_01_SMA_Diff.png
	:scale: 75%
	:align: center

.. figure:: ./plots/STK_01_ECC_Diff.png
	:scale: 75%
	:align: center

.. figure:: ./plots/STK_01_INC_Diff.png
	:scale: 75%
	:align: center

STK Coverage Tests: Model
^^^^^^^^^^^^^^^^^^^^^^^^^

The ground point access capabilities of OrbitPy's :class:`orbitpy.orbitpropcov.OrbitPropCovGrid` class were also verified against STK results. The orbit propagation settings for these tests remain identical to the settings used for the propagation tests. In order to make these tests as modular as possible, most of the orbits used were previously tested in the propagation tests.

STK settings were matched to OrbitPy wherever possible. STK uses a variable time step for access calculations, so OrbitPy's one second time step wasn't matched exactly. Rather than reporting a binary access value for each grid point at each timestep, like OrbitPy does, STK simply outputs the access intervals for each grid point; the STK output was converted to OrbitPy's format for comparison.

STK uses a different default coordinate frame definition for its sensors. Like in OrbitPy, the Z axis can be set to nadir alligned with the ECF velocity constraint. However, the X axis is alligned with the satellite's velocity vector, wherease in OrbitPy, the Y axis takes this position. In this report, orientations will be described using an intrinsic 213 Euler sequence in OrbitPy's sensor coordinate frame. The equivalent orientations were used in STK after performing a coordinate transformation.

The results of each of the 12 scenarios tested were evaluated against STK according to the following four metrics:

1.  Total number of grid points accessed.
2.  Cumulative access time, summed accross all grid points.
3.  Average number of grid points accessed per one-second time step.
4.  Cumulative access time per grid point, averaged accross grid points accessed by both softwares.

The absolute value of the percent difference in these metrics was compared for each test case. The algorithm used for access calculations is not made available in the STK documentation; these test cases are comparing two different models, without much prior understanding of any modelling differences present. For this reason, it was difficult to pin down an 'expected' or 'acceptable' bound for deviation in the results before running the test cases. The following bounds for passing each metric were decided after examination of the results.

1.  10%
2.  5%
3.  5%
4.  30%

The STK scenario file used to produce these tests can be found at :code:`tests/validation/STK/test_STK_coverage/Access_Tests.sc`.

STK Coverage Tests: Inputs
^^^^^^^^^^^^^^^^^^^^^^^^^^

The test cases were generated using combinations of the following inputs.

**Coverage Grids:**

1.  A 3 degree spaced grid, spanning 3 degrees above and 3 degrees below the equator.
2.  A 10 degree spaced grid, covering the entire globe.
3.  A 1 degree spaced grid, covering the continental United States.

**Orbits:**

1.  * SMA: 7000
    * ECC: 0
    * INC: 0
    * RAAN: 0
    * AOP: 0
    * TA: 0
2.  * SMA: 7000
    * ECC: 0
    * INC: 1
    * RAAN: 1
    * AOP: 1
    * TA: 1
3.  * SMA: 7000
    * ECC: 0
    * INC: 90
    * RAAN: 180
    * AOP: 180
    * TA: 180
4.  * SMA: 7578.378
    * ECC: 0
    * INC: 45.7865
    * RAAN: 98.8797
    * AOP: 75.78089
    * TA: 277.789
5.  * SMA: 7080.48
    * ECC: 0
    * INC: 98.22
    * RAAN: 180
    * AOP: 180
    * TA: 180

**Sensors:**

1.  A 10 degree conical sensor.
2.  A 10 degree along track, 15 degree across track rectangular sensor.
3.  A 15 degree along track, 10 degree across track rectangular sensor.

**Orientations:**

1.  (0,0,0)
2.  (30,24,-6)
3.  (-30,-25,5)


.. list-table:: **Test Combinations**
   :header-rows: 1
   :stub-columns: 1

   * -
     - 1
     - 2
     - 3
     - 4
     - 5
     - 6
     - 7
     - 8
     - 9
     - 10
     - 11
     - 12
   * - Orbit
     - 1
     - 1
     - 2
     - 3
     - 4
     - 4
     - 5
     - 5
     - 5
     - 5
     - 5
     - 5
   * - Grid
     - 2
     - 2
     - 2
     - 3
     - 3
     - 3
     - 1
     - 1
     - 1
     - 3
     - 3
     - 3
   * - Sensor
     - 1
     - 3
     - 1
     - 3
     - 1
     - 3
     - 1
     - 1
     - 2
     - 3
     - 2
     - 3
   * - Orientation
     - 1
     - 1
     - 1
     - 1
     - 1
     - 1
     - 1
     - 3
     - 2
     - 1
     - 3
     - 2

STK Coverage Tests: Analysis
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The results of all of the test cases across each metric is shown in the table below.

.. list-table:: **Test Results**
   :header-rows: 1
   :stub-columns: 1

   * -
     - 1
     - 2
     - 3
     - 4
     - 5
     - 6
     - 7
     - 8
     - 9
     - 10
     - 11
     - 12
   * - Metric 1
     - 0
     - 0
     - 1.13
     - 6.57
     - 1.43
     - 2.79
     - 2.90
     - 1.82
     - 2.57
     - 8.28
     - .351
     - .304
   * - Metric 2
     - 3.26
     - 2.73
     - 4.82
     - 2.41
     - .327
     - 1.11
     - 1.71
     - 1.96
     - 3.38
     - 1.47
     - .448
     - 2.38
   * - Metric 3
     - 0
     - 0
     - 0
     - 3.79
     - .0135
     - .651
     - .733
     - .873
     - .863
     - 2.20
     - 1.15
     - 1.23
   * - Metric 4
     - 3.26
     - 2.73
     - 4.83
     - 9.66
     - 7.58
     - 6.38
     - 16.9
     - 3.51
     - 18.7
     - 15.8
     - 6.24
     - 25.6


Visual inspection of the test case results shows excellent agreement between OrbitPy and STK coverage. In this section, the most divergent results (highest percent difference) across each metric will be analyzed.

For metric 1, test case 10 showed the highest percent difference at 8.28 percent. Test case 10 propagated a sun-synchronous orbit over a US grid, with a nadir-pointing rectangular sensor. The STK and OrbitPy results are shown below.

.. figure:: ./plots/OP_Acc_10.png
	:scale: 75%
	:align: center

.. figure:: ./plots/STK_Acc_10.png
	:scale: 75%
	:align: center
	
For metric 2, test case 3 showed the highest percent difference at 4.82 percent. Test case 3 propagated a near-equatorial orbit over a global grid with a nadir-pointing conical sensor. STK and OrbitPy results are shown below.

.. figure:: ./plots/OP_Acc_3.png
	:scale: 75%
	:align: center

.. figure:: ./plots/STK_Acc_3.png
	:scale: 75%
	:align: center
	
For metric 3, test case 4 showed the highest percent difference at 3.79 percent. Test case 4 propagated a polar orbit over a US grid with a nadir-pointing rectangular sensor. STK and OrbitPy results are shown below.

.. figure:: ./plots/OP_Acc_4.png
	:scale: 75%
	:align: center

.. figure:: ./plots/STK_Acc_4.png
	:scale: 75%
	:align: center

For metric 4, test case 12 showed the highest percent difference at 25.6 percent. Test case 12 propagated a sun-synchronous orbit over a US grid with a pointed rectangular sensor. STK and OrbitPy results are shown below.

.. figure:: ./plots/OP_Acc_12.png
	:scale: 75%
	:align: center

.. figure:: ./plots/STK_Acc_12.png
	:scale: 75%
	:align: center
